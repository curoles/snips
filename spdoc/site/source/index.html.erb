---
title: Single Point Documentation
---

<h1>SPD - Single Point Documentation</h1>

<%SPD='<abbr title="Single Point Documentation">SPD</abbr>'%>

<p>
<%=SPD%> is <i>control freak</i> way to manage documents related to one project:
keep it all in one Git repo.
</p>

<p>
<%=SPD%> is
<ol>
  <li>Set of tools and methods how to keep all SW project documents in one place.</li>
  <li>Middleman web generator <i>template</i>.</li>
  <li>SPD project makes an example of a project that uses SPD approach.</li>
</ol>
</p>

<p>
<%=SPD%> uses human readable text formats that can be rendered in Web browser.
</p>

<h2>Problem statement</h2>
<p>
<ol>
  <li>There are many sources of information important to a project
      that usually get scattered all over IT-resources
      and not connected to each other:
      <ul>
        <li>Source code.</li>
        <li>Source code and API manual or autogenerated documentation.</li>
        <li>Wiki pages.</li>
        <li>Presentation and training slides.</li>
        <li>Bug tracking system.</li>
        <li>Blogs and notes; papers.</li>
        <li>Dictionary of project specific terms and acronyms.</li>
        <li>Technical discussions inside email threads.</li>
        <li>Code review systems.</li>
      </ul>
  </li>
  <li>You can't 'grep' all the sources at once, you have to search
      for a keyword inside each source separately.
  </li>
  <li>You can't easily search inside binary files.
  </li>
  <li>Lack of uniform way to reference documents.
      Some files on a File Server,
      some on local Web servers.
      No checks when information is moved, links get broken.
  </li>
  <li>Information can easily get lost when it is not in a source
      control system. Ex. email correspondence.
  </li>
  <li>It is an overkill to have separate wiki, bug tracker and etc. for a small
      or personal project. However these tools are required.
  </li>

</ol>
</p>

<h2>SPD solution</h2>
<p>
<ol>
  <li>Keep all information in one Git repo.
      Update all related files at once.
      Git helps with merges. Git helps to always have consistent
      healthy snapshots.
  </li>
  <li>Use text formats only, Markdown is highly recommended.
      CLI "grep" should be able to find a keyword in any file.
      Fancy PowerPoint slides are usually waste of time anyway.
  </li>
  <li>Everything must be rendeable to HTML to be displayed
      in local host web browser.
  </li>
  <li>No heavy DB engines to store data, instead DB should be
      implemented with plain text, YAML and JSON files.
  </li>
  <li>All web pages should be statically generated.
      Do not use forms to change the content; change sources
      with a Text Editor or a CLI tools.
  </li>
  <li>Flow: `change files - build web content - check for errors - commit to origin`
  </li>
  <li>Because web pages are statically geneated, all errors and broken links
      are discovered during the compilation step.
      Use commit gates to stop bad commits.
  </li>
  <li>Data Rights Management could be implemented at the level of commit gates.
      A commit to origin does not go through if the user does not have access.
  </li>
</ol>
</p>

<h2>SPD implementation</h2>
<p>
<ol>
  <li>Web pages are statically generated with Middleman.
  </li>
  <li>
  </li>
  <li>
  </li>
</ol>
</p>


<!--p>
Simple way to run web-server: <code>python3 -m http.server</code>.
<kbd>ctrl + C</kbd> will stop the process.
</p-->

<!--%= link_to(
  "Read Documentation",
  "https://middlemanapp.com/basics/templating_language/",
  target: "_blank"
) %-->
